@model PagesModel
@{
    ViewData["Title"] = "Home Page";
}

<style>
    input[type="checkbox"] {
    transform: scale(5); /* Scale the checkbox to 3x its original size */
    margin: 50px; /* Add some spacing for better alignment */
    }

    img,video {
    width: 300px; /* Set the image width to 50% of its original size */
    height: auto; /* Maintain the aspect ratio */
    }

    /* General container styles */
    .post-container {
        margin-bottom: 20px; /* Adds consistent spacing between posts */
        display: flex;
        flex-direction: column; /* Stacks items vertically */
        align-items: flex-start; /* Aligns items to the left */
    }

    /* Content row (checkbox + media) */
    .content {
        display: flex;
        align-items: center; /* Vertically aligns items in the row */
        gap: 10px; /* Adds spacing between checkbox and media */
    }

    /* Common media styling for images and videos */
    .media {
        max-width: 100%; /* Ensures media fits within the container */
        height: auto; /* Maintains aspect ratio */
    }

    .description {
        margin-bottom: 5px; /* Spacing below description */
    }
</style>

<button id="toggleButton" class="btn btn-primary mb-3">Toggle all checkboxes</button>
<form id="downloadForm" method="post" action="/Home/DownloadImages">
    <hr />
    @foreach(var post in Model.Posts)
    {
        <div class="post-header">
            <h2>@post.PostName</h2>
            <p class="description" id="description-@post.PostId" style="display:none;"></p>
            <button type="button" class="btn btn-info show-description" data-post-id="@post.PostId">Show Description</button>
        </div>

        @for (int i = 0; i < post.Posts.Count; i++)
        {
            @if (post.Posts[i].IsImage)
            {
                <div class="post-container">
                    <p class="description">
                        @post.Posts[i].Name
                    </p>
                    <div class="content">
                        <input type="checkbox" name="selectedContent" class="form-check-input" value="@post.Posts[i].Link" />
                        <img src="@post.Posts[i].Thumbnail" class="media" />
                        <a href="@post.Posts[i].Link">Full quality</a>
                    </div>
                </div>
            }
            else if (post.Posts[i].IsVideo)
            {
                <div class="post-container">
                    <p class="description">
                        @post.Posts[i].Name
                    </p>
                    <div class="content">
                        <input type="checkbox" name="selectedContent" class="form-check-input" value="@post.Posts[i].Link" />
                        <video controls preload="none" class="media">
                            <source src="@post.Posts[i].Link">
                        </video>
                    </div>
                </div>
            }
            else
            {
                <div class="post-container">
                    <div class="content">
                        <input type="checkbox" name="selectedContent" class="form-check-input" value="@post.Posts[i].Link" />
                        <p>@post.Posts[i].Name - <a href="@post.Posts[i].Link">Link</a></p>
                    </div>
                </div>
            }
        }
        <hr />
    }
    <input type="hidden" name="AuthorName" value="@Model.Author" />
    <input type="hidden" name="Page" value="@(Model.CurrentPage + 1)" />
    <button type="submit" class="btn btn-primary mb-3">Download Selected Content</button>
</form>

<form method="post" action="/Home/Images">
    <!-- Previous Button -->
    @if (Model.CurrentPage > 0)
    {
        <button type="submit" class="btn btn-primary mb-3" name="Page" value="@(Model.CurrentPage - 1)">Previous (@(Model.CurrentPage))</button>
    }

    <!-- Page Buttons (1 to Pages) -->
    @for (int pageNum = 0; pageNum < Model.Pages; pageNum++)
    {
        <button type="submit" class="btn btn-primary mb-3" name="Page" value="@pageNum" @(Model.CurrentPage == pageNum ? "disabled" : "")>
            @(pageNum + 1)
        </button>
    }

    <!-- Next Button -->
    @if (Model.CurrentPage < Model.Pages - 1)
    {
        <button type="submit" class="btn btn-primary mb-3" name="Page" value="@(Model.CurrentPage + 1)">Next (@(Model.CurrentPage + 2))</button>
    }

    <!-- Hidden Fields for URL -->
    <input type="hidden" name="Url" value="@Model.Url" />
    <input type="hidden" name="FilterFuta" value="@Model.FilterFuta.ToString()" />
    <input type="hidden" name="Author" value="@Model.Author" />
    <input type="hidden" name="Site" value="@Model.Site" />
</form>

<script>
    document.getElementById('toggleButton').addEventListener('click', function () {
        // Get all checkboxes with the name 'selectedContent'
        const checkboxes = document.querySelectorAll('input[name="selectedContent"]');

        // Determine the current state of the first checkbox (on or off)
        const isChecked = checkboxes[0].checked;

        // Toggle the state of all checkboxes based on the first checkbox's state
        checkboxes.forEach(checkbox => {
            checkbox.checked = !isChecked;
        });
    });

    document.addEventListener('DOMContentLoaded', () => {
        const buttons = document.querySelectorAll('.show-description');

        buttons.forEach(button => {
            button.addEventListener('click', () => {
                const postId = button.getAttribute('data-post-id');
                const descriptionElement = document.getElementById(`description-${postId}`);

                if (descriptionElement.style.display === 'none') {
                    fetch(`/description/@Model.Site.ToString().ToLower()/@Model.UserId/@Model.Service/${postId}`) // Adjust this to your actual API endpoint
                        .then(response => {
                            if (!response.ok) {
                                throw new Error(`HTTP error! Status: ${response.status}`);
                            }
                            return response.text();
                        })
                        .then(data => {

                            // Update the description element with the content
                            descriptionElement.innerHTML = data; // Use .innerHTML to render HTML content
                            descriptionElement.style.display = 'block';
                            button.textContent = 'Hide Description';
                        })
                        .catch(error => console.error('Error fetching description:', error));
                } else {
                    descriptionElement.style.display = 'none';
                    button.textContent = 'Show Description';
                }
            });
        });
    });
</script>